Desafío 1: _¡Consigue acceso a la terminal!_
Estamos en problemas. **La IA ΩMEGA está descontrolada**. Por suerte, he conseguido añadir una contraseña para evitar que acceda a esta terminal. El sistema no es difícil, pero nos debería dar el tiempo suficiente.
Te voy a dar una lista de números y, al lado, los movimientos que debes hacer en estos números. Imagina los candados numéricos esos que van con combinaciones.
El número de la izquierda es la combinación inicial y las cadenas de texto de la derecha son los movimientos que debes hacer.
Siempre empezamos del primer número de la izquierda. Los movimientos son:

- **R (Right)** movernos al siguiente dígito
- **L (Left)** desplazarnos al dígito anterior
- **U (Up)** incrementar ese dígito
- **D (Down)** decrementar el dígito actual
  Si llegamos a la derecha del todo y recibimos un **R**, volvemos al primer dígito. Si recibimos **L** y estamos en el primero, vamos al último. En el caso de que el dígito actual sea **9** y recibamos una **U**, pasará a **0**. Y si es **D** y ese dígito es **0**, pasará a ser **9**.
  ¿Lo entiendes? ¡Es muy importante que lo entiendas! Mira, te dejo unos ejemplos:
- 000 URURD -> 119
- 1111 UUURUUU -> 4411
- 9999 LULULULD -> 8000
  ¿Lo captas? Vale, pues para desbloquear la terminal debes enviar el número al ejecutar esta combinación:
  528934712834 URDURUDRUDLLLLUUDDUDUDUDLLRRRR
  ¡Date prisa! ¡No tenemos mucho tiempo!
  ***
  Desafío 2: Detectando acceso no deseado
  Creo que ΩMEGA está intentando entrar en el sistema. Por ahora, es un bebé y está siguiendo patrones muy sencillos que podemos detectar pero está intentando crear contraseñas de administrador para acceder a la terminal.

¿Cómo podemos detectar estos intentos de acceso? Está siguiendo estos patrones:

· Sólo usa letras minúsculas y dígitos.
· Nunca usa dígitos después de una letra (Una vez aparecen letras, la contraseña debe continuar solo con letras)
· Si usa dígitos, siempre los usa de forma igual o creciente (si sale un 3, ya no usará después un número menor)
· Si usa letras, siempre las usa en orden alfabético igual o creciente (si sale una "b" ya no podrá usar una "a", por ejemplo)
Algunos ejemplos para que lo entiendas perfectamente:

1234 -> true
abc -> true
aabbcc -> true (repite pero siempre ascendente)
112233 -> true (repite pero siempre ascendente)
a123 -> false (un número después de una letra)
123abc -> true
dbce -> false (una "d" y después una "b")
Accede a este log.txt con una lista de intentos y con un programa cuenta cuántos han sido inválidos y cuántos válidos. Envía la respuesta usando el comando submit.

Por ejemplo, si hay 10 intentos válidos y 5 inválidos envía el comando submit 10true5false

$ ClaraDevelope cat CHALLENGE_02.txt
Desafío 3: ¡Siguiendo la pista de la IA ΩMEGA!
La IA maligna ΩMEGA está causando problemas en el sistema de control de la empresa. Estamos siguiendo su rastro y necesitamos averiguar cuántos pasos ha tomado para llegar a la salida (ya sea por la izquierda o por la derecha).

ΩMEGA cuenta con una lista de instrucciones de salto. Cada instrucción indica el número de posiciones que debe moverse en esa misma lista.

· Número positivo: ΩMEGA avanza ese número de posiciones.
· Número negativo: Retrocede ese número de posiciones.
· Cero: Se queda en la misma posición (pero cuenta como movimiento).
Importante: Cada vez que ΩMEGA lee una instrucción, incrementa el valor de esa instrucción en 1 después de usarla.

· Si encuentra un 2, avanza 2 posiciones y luego esa instrucción se convierte en 3.
· Si encuentra un 0, se queda en su posición y luego esa instrucción se convierte en 1.
· Si encuentra un -3, retrocede 3 posiciones y luego esa instrucción se convierte en -2.
Voy a darte un ejemplo. Entre paréntesis te indicaré la instrucción actual en la que se encuentra ΩMEGA.

Lista de instrucciones: 1 2 4 1 -2

Inicio: (1) 2 4 1 -2 // → ΩMEGA empieza en la posición 0
Paso 1: 2 (2) 4 1 -2 // → Avanza una posición y la instrucción se convierte en 2
Paso 2: 2 3 4 (1) -2 // → Avanza 2 posiciones y la instrucción se convierte en 3
Paso 3: 2 3 4 2 (-2) // → Avanza una posición y la instrucción se convierte en 2
Paso 4: 2 3 (4) 2 -1 // → Retrocede dos posiciones y pasa a -1
Paso 5: 2 3 4 2 -1 // → Avanza 4 posiciones y escapa
Resultado: 5
Otro ejemplo con lista de instrucciones: 0 1 2 3 -1

Inicio: (0) 1 2 3 -1 // → ΩMEGA empieza en la posición 0
Paso 1: (1) 1 2 3 -1 // → No avanza pero incrementa la instrucción en 1
Paso 2: 2 (1) 2 3 -1 // → Avanza una posición y la instrucción se convierte en 2
Paso 3: 2 2 (2) 3 -1 // → Avanza una posición y la instrucción se convierte en 2
Paso 4: 2 2 3 3 (-1) // → Avanza dos posiciones y la instrucción se convierte en 3
Paso 5: 2 2 3 (3) 0 // → Retrocede una posición y la instrucción se convierte en 0
Paso 6: 2 2 3 4 0 // → Avanza tres posiciones y escapa
Resultado: 6
Otro ejemplo saliendo por la izquierda: 1 -2 5

Inicio: (1) -2 5 // → ΩMEGA empieza en la posición 0
Paso 1: 2 (-2) 5 // → Avanza una posición y la instrucción se convierte en 1
Paso 2: 2 -1 5 // → Retrocede dos posiciones y sale por la izquierda
Resultado: 2
¡Ten en cuenta que, si la lista empieza por un número negativo, entonces ΩMEGA saldrá por la izquierda en un sólo paso!

Accede a este trace.txt. Tiene una lista de los movimientos que realizó ΩMEGA separados por salto de línea. Necesito que calcules los pasos que necesito ΩMEGA para salir de cada instrucción por línea, que sumes todos los resultados y me digas el resultado final de pasos que necesito ΩMEGA en total y el resultado de la última línea, separado por guión.

Por ejemplo, si necesitó 99 pasos en total sumándo los pasos de cada línea y para la instrucción de la última línea necesitó 13 pasos entonces la solución a enviar sería submit 99-13

$ ClaraDevelope cat CHALLENGE_03.txt
Desafío 4: Evitando el caos en la red
¡La IA maligna ΩMEGA está atacando la red de nodos de la empresa! Cada nodo tiene un identificador único que es un número entero y está conectado a otros nodos, formando una compleja estructura.
ΩMEGA está destruyendo todas las redes que consten de 3 nodos o más conectados entre sí. ¡Hay que descubrir qué nodos están a salvo de sus ataques!

¿Cómo funciona la red?

La red se representa como una lista de pares de conexiones entre nodos. Por ejemplo:

Entrada: [[1, 2], [2, 3], [4, 5]]
Esto significa:

El nodo 1 está conectado al nodo 2.
El nodo 2 está conectado al nodo 3.
El nodo 4 está conectado al nodo 5.
En este caso:

Los nodos 1, 2 y 3 forman un grupo conectado.
Los nodos 4 y 5 forman otro grupo conectado.
Ejemplo 1

Entrada: [[1, 2], [2, 3], [4, 5]]
Redes: [1, 2, 3] y [4, 5]
ΩMEGA destruye la red [1, 2, 3]
Nodos a salvo: 4 y 5
Salida: [4, 5]
Ejemplo 2

Entrada: [[1, 2], [2, 3], [3, 4]]
Redes: [1, 2, 3, 4]
ΩMEGA destruye la red [1, 2, 3, 4]
Nodos a salvo: ninguno
Salida: []
Ejemplo 3

Entrada: [[4, 6], [7, 9], [10, 12], [12, 16]]
Redes: [4, 6], [7, 9], [10, 12, 16]
ΩMEGA destruye la red [10, 12, 16]
Nodos a salvo: 4, 6, 7 y 9
Salida: [4, 6, 7, 9]
¿Qué debes hacer?

Accede al archivo network.txt, que contiene una lista de conexiones entre nodos. Envía la lista de nodos ordenados de forma ascendente, separado por comas y sin espacios, que se han salvado del ataque. Por ejemplo, del Ejemplo 1 enviarías a la terminal submit 4,5.

Pista: Hay 70 nodos a salvo... ¡ahora sólo falta saber cuáles son!

Desafío 5: ¡Encuentra a ΩMEGA!
La IA maligna ΩMEGA está acorralada. Tras revisar todos los nodos sanos de la red en el reto anterior... ¡hemos detectado que ΩMEGA se ha escondido en uno!

No sabemos exactamente cuál es... pero sabemos las reglas que ha seguido ΩMEGA para esconderse.

Necesitamos encontrar los números que cumplen las siguientes condiciones:

El número es primo.
La suma de sus dígitos también es un número primo.
Tu tarea es escribir un programa que encuentre cuántos números de la lista cumplen con estas condiciones y determinar cuál es el tercer número que cumple con ellas al recorrer la lista en orden ascendente.

Ejemplo:

Si tuviéramos la lista: 11,12,13,14

11: Es primo. 1 + 1 = 2, que es primo. → Cumple.
12: No es primo. → No cumple.
13: Es primo. 1 + 3 = 4, que no es primo. → No cumple.
14: No es primo. → No cumple.
En este caso, solo un número cumple las condiciones, y ese número sería el primero (11).

¿Qué debes hacer?

Analiza la lista de nodos del resultado del reto anterior y encuentra todos los números que cumplen las condiciones.
Determina cuántos números cumplen las condiciones.
Identifica el tercer número que cumple las condiciones al recorrer la lista en orden ascendente.
Respuesta:

Envía el número total de números que cumplen las condiciones y el tercer número encontrado, separados por un guión. Por ejemplo, si hay 4 números que cumplen y el tercer número es 11, enviarías: submit 4-11
